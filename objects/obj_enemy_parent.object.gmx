<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize

first_plr_sighting = false;
has_seen_plr = false;
sees_player = false;
last_seen_x = 0;
last_seen_y = 0;
push_spd = 0;
current_push_index = 0;

collx = -(sprite_width / 4);
colly = -(sprite_height / 4);
coll_size = sprite_width / 2;

image_angle = irandom(360);
direction = image_angle;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///see player

if collision_line(x, y, obj_player.x, obj_player.y, obj_solid, false, true) != noone {
    sees_player = false;
} else {
    sees_player = true;
    last_seen_x = obj_player.x;
    last_seen_y = obj_player.y;
    
    if !has_seen_plr {
        has_seen_plr = true;
        first_plr_sighting = true;
    } else {
        first_plr_sighting = false;
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///move out of each other

var push_inst = instance_find(obj_enemy_parent, current_push_index++);

if push_inst != noone {
    if push_inst != id {
        if point_distance(x, y, push_inst.x, push_inst.y) &lt; sprite_width / 2 + push_inst.sprite_width / 2 {
            scr_move_around_solid(
                collx,
                colly,
                coll_size,
                lengthdir_x(push_spd, point_direction(push_inst.x, push_inst.y, x, y)),
                lengthdir_y(push_spd, point_direction(push_inst.x, push_inst.y, x, y)));
        }
    }
} else {
    current_push_index = 0;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///move out of player

if point_distance(obj_player.x, obj_player.y, x, y) &lt; obj_player.sprite_width / 2 + sprite_width / 2 {
    scr_move_around_solid(
        collx,
        colly,
        coll_size,
        lengthdir_x(push_spd, point_direction(obj_player.x, obj_player.y, x, y)),
        lengthdir_y(push_spd, point_direction(obj_player.x, obj_player.y, x, y)));
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
