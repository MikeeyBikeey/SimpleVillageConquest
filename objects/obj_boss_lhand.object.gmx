<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_boss_hand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-20</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize

attacked_script = scr_attack_boss_hand;

owner = noone;
state = STATE_COMBAT;

max_hearts = 1000;
hearts = max_hearts;
acc = 0.1;
speed = 0;
friction = 0;
max_spd = 6;
max_height = 16;
up_spd = 0.1;
z_spd = 0.1;
death_time = scr_seconds(3);
finished_death = false;

z = max_height;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create dust and finish death

finished_death = true;

repeat(10) {
    instance_create(x, y - z, obj_part_dust);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ready hand

if state == STATE_DEAD {
    exit;
}

friction = 0;
state = STATE_COMBAT;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///smash the floor

if state == STATE_DEAD {
    exit;
}

state = STATE_RESTING;
friction = 0;
speed = 0;
z = 0;
alarm[1] = scr_seconds(3);

repeat(10) {
    instance_create(x + irandom(sprite_width), y + irandom(sprite_height), obj_part_dust);
}

if point_distance(x, y, obj_player.x, obj_player.y) &lt; 32 {
    scr_hurt_player(2);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///states

switch(state) {
case STATE_COMBAT:
    direction -= angle_difference(direction, point_direction(x, y, obj_player.x, obj_player.y)) / 8;
    image_angle -= angle_difference(image_angle, direction) / 16;

    if z &lt; max_height {
        z = min(z + up_spd, max_height);
    }
    
    if z &gt;= max_height &amp;&amp; point_distance(x, y, obj_player.x, obj_player.y) &lt; 32 {
        friction = 0.1;
        alarm[0] = scr_seconds(0.5);
    } else {
        scr_boss_hand_speed_up();
    }
    break;

case STATE_RESTING:
    
    break;

case STATE_DEAD:
    if !finished_death {
        if alarm[2] == -1 {
            alarm[2] = death_time;
            audio_play_sound(snd_hand_death, 1, false);
        }
    
        friction = 1;
        z += z_spd;
        alarm[0] = -1;
        alarm[1] = -1;
        
        var death_mult = alarm[2] / death_time;
        image_angle += 1 - death_mult * 45;
        image_xscale = death_mult;
        image_yscale = death_mult;
    }
    break;

default:
    state = STATE_CIRCLE_OWNER;
    break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw self

if !finished_death {
    draw_set_colour(c_black);
    draw_set_alpha(0.25);
    draw_circle(x, y, sprite_width / 2, false);
    draw_set_alpha(1);
    
    draw_sprite_ext(sprite_index, image_index, x, y - z, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
