<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize

state = STATE_NORMAL;

turn_divid = 6;
fric = 0.8;
acc = 1.8;
spd = 0;
max_spd = 5;
real_dir = 0; // real direction
evade_spd = max_spd * 3;

hearts = obj_main.base_hearts;

sword_reach = 16;
sword_radius = 16;
sword_swing_time = scr_seconds(0.5);
sword_side = 1;

is_hammer_ready = true;
is_yoyo_ready = true;

invincible_time = scr_seconds(3);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///turn off invincible
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///sword swing
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///movement

image_angle = point_direction(x, y, mouse_x, mouse_y);

var relx = -(sprite_width / 4);
var rely = -(sprite_height / 4);
var coll_size = sprite_width / 2;

real_dir = -1;

if keyboard_check(ord("A")) {
    scr_player_walk(-1, 0);
}
if keyboard_check(ord("D")) {
    scr_player_walk(1, 0);
}
if keyboard_check(ord("W")) {
    scr_player_walk(0, -1);
}
if keyboard_check(ord("S")) {
    scr_player_walk(0, 1);
}

if real_dir != -1 {
    if spd == 0 {
        direction = real_dir;
        if spd &lt; max_spd {
            spd = clamp(spd + acc, 0, max_spd);
        }
    } else if abs(angle_difference(real_dir, direction)) &gt; 135 {
        spd = max(spd - acc, 0);
    } else {
        direction -= angle_difference(direction, real_dir) / ((spd / max_spd) * turn_divid);
        if spd &lt; max_spd {
            spd = clamp(spd + acc, 0, max_spd);
        }
    }
    
    //spd = clamp(spd - acc, 0, max_spd);
    /*if abs(angle_difference(real_dir, direction)) &gt; 90 {
        if spd &gt; max_spd / 2 {
            repeat(8) {
                with(instance_create(x, y, obj_part_dust)) {
                    direction = other.direction + irandom_range(-15, 15);
                }
            }
        }
        direction = real_dir;
    }*/
}

/*

if keyboard_check(ord("A"))
    || keyboard_check(ord("D"))
    || keyboard_check(ord("W"))
    || keyboard_check(ord("S"))
{
    if spd &lt; max_spd {
        spd = clamp(spd + acc, 0, max_spd);
    }
}*/

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///move

spd = max(spd - fric, 0);
scr_move_around_solid(relx, rely, coll_size, lengthdir_x(spd, direction), lengthdir_y(spd, direction));

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///swing sword

if alarm[0] == -1 {
    if mouse_check_button(mb_left) {
        alarm[0] = sword_swing_time;
        sword_side *= -1;
        
        var sword = instance_create(x, y, obj_player_sword);
        sword.owner = id;
        sword.image_yscale = sword_side;
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///state

switch(state) {
case STATE_NORMAL:
    
    break;

default:
    state = STATE_NORMAL;
    break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///yoyo mace

if obj_main.unlocked_yoyo &amp;&amp; is_yoyo_ready {
    is_yoyo_ready = false;
    
    var yoyo_mace = instance_create(x, y, obj_yoyo_mace);
    yoyo_mace.owner = id;
    yoyo_mace.direction = image_angle;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="51">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///use hammer

if obj_main.unlocked_hammer &amp;&amp; is_hammer_ready {
    is_hammer_ready = false;

    var hammer = instance_create(x, y, obj_hammer);
    hammer.owner = id;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>500</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring>draw_self();</codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw hearts

var heart_x = x - hearts * (sprite_get_width(spr_heart) + 1) / 2;
for(var i = 0; i &lt; hearts; i++) {
    draw_sprite_ext(
        spr_heart,
        1,
        heart_x + i * (sprite_get_width(spr_heart) + 1),
        y - 16,
        1,
        1,
        0,
        -1,
        0.5);
        
    if alarm[1] != -1 {
        draw_sprite_ext(
            spr_heart,
            0,
            heart_x + i * (sprite_get_width(spr_heart) + 1),
            y - 16,
            1,
            1,
            0,
            -1,
            alarm[1] / invincible_time);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///evade

direction = real_dir;
spd = evade_spd;

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
